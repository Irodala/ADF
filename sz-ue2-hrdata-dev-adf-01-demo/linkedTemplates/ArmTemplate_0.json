{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "sz-ue2-hrdata-dev-adf-01-demo"
		},
		"InputBlob_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'InputBlob'"
		},
		"LS_ASA_BootCampStore_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASA_BootCampStore'"
		},
		"LS_ASD_BootCamp_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_ASD_BootCamp'"
		},
		"LS_Storage_Acc_ADLS_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'LS_Storage_Acc_ADLS'"
		},
		"OutputSQL_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'OutputSQL'"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/InputBlob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('InputBlob_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASA_BootCampStore')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASA_BootCampStore_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_ASD_BootCamp')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('LS_ASD_BootCamp_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/LS_Storage_Acc_ADLS')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('LS_Storage_Acc_ADLS_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputSQL')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('OutputSQL_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/CarsSQL')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSQL",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Adam/1.INtroduction"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Car",
						"type": "varchar"
					},
					{
						"name": "MPG",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Cylinders",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Displacement",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Horsepower",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Weight",
						"type": "decimal",
						"precision": 18,
						"scale": 3
					},
					{
						"name": "Model",
						"type": "varchar"
					},
					{
						"name": "Origin",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Cars"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_to_Source')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputBlob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Adam/4.Data Flow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "movies.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DS_to_Target')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputBlob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Adam/4.Data Flow"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DestinationSAlesOrder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASA_BootCampStore",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Rangeetha/3rd class"
				},
				"annotations": [],
				"type": "AzureSqlDWTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "SalesOrderDetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASA_BootCampStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputBlob')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputBlob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Adam/1.INtroduction"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "cars.csv",
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Make",
						"type": "String"
					},
					{
						"name": "Model",
						"type": "String"
					},
					{
						"name": "Type",
						"type": "String"
					},
					{
						"name": "Origin",
						"type": "String"
					},
					{
						"name": "DriveTrain",
						"type": "String"
					},
					{
						"name": "Length",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/InputCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputBlob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Adam/3.Triggers"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputCSV')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputBlob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Adam/3.Triggers"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "output"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OutputSQLTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "OutputSQL",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"SQLTableName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Adam/2.Parametrized DataSets"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ICAO",
						"type": "nvarchar"
					},
					{
						"name": "IATA",
						"type": "nvarchar"
					},
					{
						"name": "MAKER",
						"type": "nvarchar"
					},
					{
						"name": "DESCRIPTION",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": {
						"value": "@dataset().SQLTableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/OutputSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SourceData')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "InputBlob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"FileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Adam/2.Parametrized DataSets"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().FileName",
							"type": "Expression"
						},
						"container": "input"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/InputBlob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/WatermarkTable')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_ASD_BootCamp",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Rangeetha/3rd class"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TableName",
						"type": "varchar"
					},
					{
						"name": "WatermarkValue",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/LS_ASD_BootCamp')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Copy_from_blob_to_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Cars CSV to SQL",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "delete from cars",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "Make",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Make",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Model",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Model",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Type",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Type",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Origin",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Origin",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "DriveTrain",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "DriveTrain",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"name": "Length",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Length",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InputBlob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "CarsSQL",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Adam"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T14:56:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputBlob')]",
				"[concat(variables('factoryId'), '/datasets/CarsSQL')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/2_Parametrized_Data_Set')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Blob to SQL",
						"description": "Copying the data from Blob to SQL tables, Parametrized Dataset, so you can pass any file from Blob and pass it to any table in SQL, just passing parameters",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Backup from SQL to blob",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SourceData",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(pipeline().parameters.Filename, '.csv')",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OutputSQLTable",
								"type": "DatasetReference",
								"parameters": {
									"SQLTableName": {
										"value": "@pipeline().parameters.Tablename",
										"type": "Expression"
									}
								}
							}
						]
					},
					{
						"name": "Backup from SQL to blob",
						"description": "Backing up the existing data  from SQL to Blob, before Copying the new data to SQL from blob. Creating new File in blob with Time UTC",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "OutputSQLTable",
								"type": "DatasetReference",
								"parameters": {
									"SQLTableName": {
										"value": "@pipeline().parameters.Tablename",
										"type": "Expression"
									}
								}
							}
						],
						"outputs": [
							{
								"referenceName": "SourceData",
								"type": "DatasetReference",
								"parameters": {
									"FileName": {
										"value": "@concat(pipeline().parameters.Filename,'-',utcnow(),'.csv')",
										"type": "Expression"
									}
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"Filename": {
						"type": "string"
					},
					"Tablename": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Adam"
				},
				"annotations": [],
				"lastPublishTime": "2021-11-11T14:56:41Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/SourceData')]",
				"[concat(variables('factoryId'), '/datasets/OutputSQLTable')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/3_Triggers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "InputCSV",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "cars.csv"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "OutputCSV",
								"type": "DatasetReference",
								"parameters": {
									"FileName": "cars.csv"
								}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "Adam"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/InputCSV')]",
				"[concat(variables('factoryId'), '/datasets/OutputCSV')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental_load')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "LookupoldWatermark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select Watermarkvalue from watermark\nwhere tablename ='@{pipeline().parameters.FinalTableName}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "LookupNewWaterMark",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select max(@{pipeline().parameters.waterMarkCol}) as NewwaterMarkVal from @{pipeline().parameters.srcTable}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "WatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopySQLtoSA",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "LookupoldWatermark",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "LookupNewWaterMark",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select * from @{pipeline().parameters.srcTable}\nwhere @{pipeline().parameters.waterMarkCol} >'@{activity('LookupoldWatermark').output.firstRow.Watermarkvalue}' and @{pipeline().parameters.waterMarkCol}<='@{activity('LookupNewWaterMark').output.firstRow.NewwaterMarkVal}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "SqlDWSink",
								"preCopyScript": {
									"value": "TRUNCATE TABLE @{pipeline().parameters.stgTableName}",
									"type": "Expression"
								},
								"allowCopyCommand": true,
								"copyCommandSettings": {},
								"disableMetricsCollection": false
							},
							"enableStaging": true,
							"stagingSettings": {
								"linkedServiceName": {
									"referenceName": "LS_Storage_Acc_ADLS",
									"type": "LinkedServiceReference"
								},
								"path": "fsjulybootcamp"
							},
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "SalesOrderID",
											"type": "Int32"
										},
										"sink": {
											"name": "SalesOrderID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "SalesOrderDetailID",
											"type": "Int32"
										},
										"sink": {
											"name": "SalesOrderDetailID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "OrderQty",
											"type": "Int16"
										},
										"sink": {
											"name": "OrderQty",
											"type": "Int16"
										}
									},
									{
										"source": {
											"name": "ProductID",
											"type": "Int32"
										},
										"sink": {
											"name": "ProductID",
											"type": "Int32"
										}
									},
									{
										"source": {
											"name": "UnitPrice",
											"type": "Decimal"
										},
										"sink": {
											"name": "UnitPrice",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "UnitPriceDiscount",
											"type": "Decimal"
										},
										"sink": {
											"name": "UnitPriceDiscount",
											"type": "Decimal"
										}
									},
									{
										"source": {
											"name": "LineTotal",
											"type": "Decimal"
										},
										"sink": {
											"name": "LineTotal",
											"type": "String"
										}
									},
									{
										"source": {
											"name": "rowguid",
											"type": "Guid"
										},
										"sink": {
											"name": "rowguid",
											"type": "Guid"
										}
									},
									{
										"source": {
											"name": "ModifiedDate",
											"type": "DateTime"
										},
										"sink": {
											"name": "ModifiedDate",
											"type": "DateTime"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "WatermarkTable",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DestinationSAlesOrder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "MergeStgTarget",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CopySQLtoSA",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_upsert_Sales]"
						},
						"linkedServiceName": {
							"referenceName": "LS_ASA_BootCampStore",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UpdateWatermark",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "MergeStgTarget",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[usp_write_watermark]",
							"storedProcedureParameters": {
								"LastModifiedtime": {
									"value": {
										"value": "@activity('LookupNewWaterMark').output.firstRow.NewwaterMarkVal",
										"type": "Expression"
									},
									"type": "DateTime"
								},
								"TableName": {
									"value": {
										"value": "@pipeline().parameters.FinalTableName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_ASD_BootCamp",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"waterMarkCol": {
						"type": "string",
						"defaultValue": "ModifiedDate"
					},
					"srcTable": {
						"type": "string",
						"defaultValue": "SalesOrderDetail"
					},
					"FinalTableName": {
						"type": "string",
						"defaultValue": "SalesOrderDetail"
					},
					"stgTableName": {
						"type": "string",
						"defaultValue": "stgSalesOrderDetail"
					},
					"storedProcUpsert": {
						"type": "string",
						"defaultValue": "usp_upsert_Sales"
					},
					"storedProcWaterMark": {
						"type": "string",
						"defaultValue": "usd_update_WaterMark"
					}
				},
				"folder": {
					"name": "Rangeetha"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/WatermarkTable')]",
				"[concat(variables('factoryId'), '/datasets/DestinationSAlesOrder')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASA_BootCampStore')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_ASD_BootCamp')]",
				"[concat(variables('factoryId'), '/linkedServices/LS_Storage_Acc_ADLS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesCleanFlow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "ADAM"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "DS_to_Source",
								"type": "DatasetReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "DS_to_Target",
								"type": "DatasetReference"
							},
							"name": "MoviesByYearSinkoutput"
						}
					],
					"transformations": [
						{
							"name": "YearExtraction"
						},
						{
							"name": "MoviesByYear"
						},
						{
							"name": "Aggregate2"
						}
					],
					"script": "source(output(\n\t\tmovieId as string,\n\t\ttitle as string,\n\t\tgenres as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> Movies\nMovies derive(Year = toInteger(trim(right(title, 6), '()'))\r\n,\n\t\ttitle = toString(left(title, length(title) -6))) ~> YearExtraction\nYearExtraction aggregate(groupBy(Year),\n\tMoviesCount = count()) ~> MoviesByYear\nYearExtraction aggregate(groupBy(Year),\n\tMoviesByYear = count()) ~> Aggregate2\nMoviesByYear sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['MoviesByYear'],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tpartitionBy('hash', 1)) ~> MoviesByYearSinkoutput"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/DS_to_Source')]",
				"[concat(variables('factoryId'), '/datasets/DS_to_Target')]"
			]
		}
	]
}